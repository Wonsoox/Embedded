# 필요한 라이브러리들을 임포트
import cv2  # OpenCV를 사용하여 이미지 처리
from cvzone.FaceDetectionModule import FaceDetector  # 얼굴 탐지 모듈
import pyfirmata  # Arduino와의 통신을 위한 라이브러리
import numpy as np  # 서보 모터 제어를 위한 수학 연산에 사용

# 웹캠에서 비디오 캡처 설정
cap = cv2.VideoCapture(0)  # 기본 웹캠을 사용하여 영상 캡처
ws, hs = 1280, 720  # 영상 해상도를 1280x720으로 설정
cap.set(3, ws)  # 영상 너비 설정
cap.set(4, hs)  # 영상 높이 설정

# 웹캠이 열리지 않으면 오류 메시지 출력 후 프로그램 종료
if not cap.isOpened():
    print("Camera couldn't Access!!!")
    exit()

# Arduino와의 통신을 위한 설정
port = "COM7"  # Arduino가 연결된 포트 (COM7)
board = pyfirmata.Arduino(port)  # Arduino 보드 설정
servo_pinX = board.get_pin('d:9:s')  # 9번 핀에 연결된 서보 모터 X축 제어
servo_pinY = board.get_pin('d:10:s')  # 10번 핀에 연결된 서보 모터 Y축 제어

# 얼굴 탐지기 설정
detector = FaceDetector()  # FaceDetector 객체 생성
servoPos = [90, 90]  # 서보 모터의 초기 위치 (X축, Y축을 각각 90도로 설정)

# 무한 루프 시작: 실시간으로 웹캠에서 이미지를 읽고 처리
while True:
    success, img = cap.read()  # 웹캠에서 이미지를 읽음
    img, bboxs = detector.findFaces(img, draw=False)  # 이미지에서 얼굴 탐지, bboxs는 탐지된 얼굴 정보

    # 얼굴이 탐지되었을 때
    if bboxs:
        # 얼굴의 중심 좌표를 가져옴
        fx, fy = bboxs[0]["center"][0], bboxs[0]["center"][1]  # 얼굴 중심의 x, y 좌표
        pos = [fx, fy]  # 좌표 저장

        # 얼굴의 좌표를 서보 모터의 각도로 변환
        servoX = np.interp(fx, [0, ws], [0, 180])  # X 좌표를 0~180도 범위로 변환
        servoY = np.interp(fy, [0, hs], [0, 180])  # Y 좌표를 0~180도 범위로 변환

        # 서보 각도를 0~180도 사이로 제한
        if servoX < 0:
            servoX = 0
        elif servoX > 180:
            servoX = 180
        if servoY < 0:
            servoY = 0
        elif servoY > 180:
            servoY = 180

        # 서보 위치 업데이트
        servoPos[0] = servoX  # X축 서보 위치 업데이트
        servoPos[1] = servoY  # Y축 서보 위치 업데이트

        # 얼굴의 위치를 표시하는 그래픽 추가 (원의 중심, 좌표 텍스트 등)
        cv2.circle(img, (fx, fy), 80, (0, 0, 255), 2)  # 탐지된 얼굴 주위에 큰 원 그리기
        cv2.putText(img, str(pos), (fx+15, fy-15), cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 0), 2)  # 좌표 텍스트 표시
        cv2.line(img, (0, fy), (ws, fy), (0, 0, 0), 2)  # 얼굴의 Y축 기준선 그리기
        cv2.line(img, (fx, hs), (fx, 0), (0, 0, 0), 2)  # 얼굴의 X축 기준선 그리기
        cv2.circle(img, (fx, fy), 15, (0, 0, 255), cv2.FILLED)  # 얼굴 중심에 작은 원 그리기
        cv2.putText(img, "TARGET LOCKED", (850, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 255), 3)  # "TARGET LOCKED" 텍스트 표시

    # 얼굴이 탐지되지 않았을 때
    else:
        cv2.putText(img, "NO TARGET", (880, 50), cv2.FONT_HERSHEY_PLAIN, 3, (0, 0, 255), 3)  # "NO TARGET" 텍스트 표시
        cv2.circle(img, (640, 360), 80, (0, 0, 255), 2)  # 화면 중앙에 원 그리기
        cv2.circle(img, (640, 360), 15, (0, 0, 255), cv2.FILLED)  # 작은 원 그리기
        cv2.line(img, (0, 360), (ws, 360), (0, 0, 0), 2)  # 화면 중앙에 X축 기준선 그리기
        cv2.line(img, (640, hs), (640, 0), (0, 0, 0), 2)  # 화면 중앙에 Y축 기준선 그리기

    # 현재 서보 모터의 각도를 화면에 표시
    cv2.putText(img, f'Servo X: {int(servoPos[0])} deg', (50, 50), cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 0), 2)
    cv2.putText(img, f'Servo Y: {int(servoPos[1])} deg', (50, 100), cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 0), 2)

    # 서보 모터를 해당 각도로 회전
    servo_pinX.write(servoPos[0])  # X축 서보 모터 제어
    servo_pinY.write(servoPos[1])  # Y축 서보 모터 제어

    # 처리된 이미지를 화면에 표시
    cv2.imshow("Image", img)  # 이미지를 창에 출력
    cv2.waitKey(1)  # 1ms 대기 후 다음 프레임 처리
